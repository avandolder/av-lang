#include <unordered_map>
#include <utility>
#include <string>

#include "token.h"
#include "trie.h"

std::unordered_map<std::string, Token::Type> Token::keywords = {
    {"var", Token::VAR},
    {"func", Token::FUNC},
    {"return", Token::RETURN},
    {"break", Token::BREAK},
    {"continue", Token::CONTINUE},
    {"if", Token::IF},
    {"else", Token::ELSE},
    {"while", Token::WHILE},
    {"for", Token::FOR},
    {"in", Token::IN},
    {"and", Token::AND},
    {"or", Token::OR},
    {"xor", Token::XOR},
    {"not", Token::NOT},
};

using P = std::pair<std::string, Token::Type>;
Trie<Token::Type> Token::symbols {
    P(";", Token::SEMI),
    P(":", Token::COLON),
    P(",", Token::COMMA),
    P("=", Token::ASSIGN),
    P("+=", Token::ADDASSIGN),
    P("-=", Token::SUBASSIGN),
    P("*=", Token::MULASSIGN),
    P("/=", Token::DIVASSIGN),
    P("**=", Token::POWASSIGN),
    P("%=", Token::MODASSIGN),
    P("&=", Token::BITANDASSIGN),
    P("|=", Token::BITORASSIGN),
    P("^=", Token::BITXORASSIGN),
    P("~=", Token::BITNOTASSIGN),
    P("<<=", Token::BITSHLASSIGN),
    P(">>=", Token::BITSHRASSIGN),
    P("(", Token::LPAR),
    P(")", Token::RPAR),
    P("{", Token::LBRA),
    P("}", Token::RBRA),
    P("==", Token::EQUAL),
    P("!=", Token::NOTEQUAL),
    P("<", Token::LT),
    P(">", Token::GT),
    P("<=", Token::LTE),
    P(">=", Token::GTE),
    P("+", Token::PLUS),
    P("-", Token::MINUS),
    P("*", Token::MULTIPLY),
    P("/", Token::DIVIDE),
    P("**", Token::POWER),
    P("%", Token::MODULO),
    P("&", Token::BITAND),
    P("|", Token::BITOR),
    P("^", Token::BITXOR),
    P("~", Token::BITNOT),
    P("<<", Token::BITSHL),
    P(">>", Token::BITSHR),
};

std::vector<std::string> Token::type_names = {
    "ERROR",
    "END",
    "COMMENT",
    "SEMI",
    "COLON",
    "COMMA",
    "VAR",
    "ID",
    "ASSIGN",
    "ADDASSIGN",
    "SUBASSIGN",
    "MULASSIGN",
    "DIVASSIGN",
    "POWASSIGN",
    "MODASSIGN",
    "BITANDASSIGN",
    "BITORASSIGN",
    "BITXORASSIGN",
    "BITNOTASSIGN",
    "BITSHLASSIGN",
    "BITSHRASSIGN",
    "FUNC",
    "LPAR",
    "RPAR",
    "LBRA",
    "RBRA",
    "RETURN",
    "BREAK",
    "CONTINUE",
    "IF",
    "ELSE",
    "WHILE",
    "FOR",
    "IN",
    "STRING",
    "NUMBER",
    "EQUAL",
    "NOTEQUAL",
    "LT",
    "GT",
    "LTE",
    "GTE",
    "AND",
    "OR",
    "XOR",
    "NOT",
    "PLUS",
    "MINUS",
    "MULTIPLY",
    "DIVIDE",
    "POWER",
    "MODULO",
    "BITAND",
    "BITOR",
    "BITXOR",
    "BITNOT",
    "BITSHL",
    "BITSHR",
};
