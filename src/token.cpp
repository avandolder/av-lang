#include <unordered_map>
#include <utility>
#include <string>

#include "token.h"
#include "trie.h"

std::unordered_map<std::string, Token::Type> Token::keywords = {
  {"var", Token::VAR},
  {"func", Token::FUNC},
  {"return", Token::RETURN},
  {"break", Token::BREAK},
  {"continue", Token::CONTINUE},
  {"if", Token::IF},
  {"else", Token::ELSE},
  {"while", Token::WHILE},
  {"for", Token::FOR},
  {"in", Token::IN},
  {"and", Token::AND},
  {"or", Token::OR},
  {"xor", Token::XOR},
  {"not", Token::NOT},
};

using Elem = std::pair<std::string, Token::Type>;
Trie<Token::Type> Token::symbols {
  Elem(";", Token::SEMI),
  Elem(":", Token::COLON),
  Elem(",", Token::COMMA),
  Elem("=", Token::ASSIGN),
  Elem("+=", Token::ADDASSIGN),
  Elem("-=", Token::SUBASSIGN),
  Elem("*=", Token::MULASSIGN),
  Elem("/=", Token::DIVASSIGN),
  Elem("**=", Token::POWASSIGN),
  Elem("%=", Token::MODASSIGN),
  Elem("&=", Token::BITANDASSIGN),
  Elem("|=", Token::BITORASSIGN),
  Elem("^=", Token::BITXORASSIGN),
  Elem("~=", Token::BITNOTASSIGN),
  Elem("<<=", Token::BITSHLASSIGN),
  Elem(">>=", Token::BITSHRASSIGN),
  Elem("(", Token::LPAR),
  Elem(")", Token::RPAR),
  Elem("{", Token::LBRA),
  Elem("}", Token::RBRA),
  Elem("==", Token::EQU),
  Elem("!=", Token::NEQU),
  Elem("<", Token::LT),
  Elem(">", Token::GT),
  Elem("<=", Token::LTE),
  Elem(">=", Token::GTE),
  Elem("+", Token::PLUS),
  Elem("-", Token::MINUS),
  Elem("*", Token::MULTIPLY),
  Elem("/", Token::DIVIDE),
  Elem("**", Token::POWER),
  Elem("%", Token::MODULO),
  Elem("&", Token::BITAND),
  Elem("|", Token::BITOR),
  Elem("^", Token::BITXOR),
  Elem("~", Token::BITNOT),
  Elem("<<", Token::BITSHL),
  Elem(">>", Token::BITSHR),
};

std::vector<std::string> Token::type_names = {
  "ERROR",
  "END",
  "COMMENT",
  "SEMI",
  "COLON",
  "COMMA",
  "VAR",
  "ID",
  "ASSIGN",
  "ADDASSIGN",
  "SUBASSIGN",
  "MULASSIGN",
  "DIVASSIGN",
  "POWASSIGN",
  "MODASSIGN",
  "BITANDASSIGN",
  "BITORASSIGN",
  "BITXORASSIGN",
  "BITNOTASSIGN",
  "BITSHLASSIGN",
  "BITSHRASSIGN",
  "FUNC",
  "LPAR",
  "RPAR",
  "LBRA",
  "RBRA",
  "RETURN",
  "BREAK",
  "CONT",
  "IF",
  "ELSE",
  "WHILE",
  "FOR",
  "IN",
  "STRING",
  "NUMBER",
  "EQU",
  "NEQU",
  "LT",
  "GT",
  "LTE",
  "GTE",
  "AND",
  "OR",
  "XOR",
  "NOT",
  "PLUS",
  "MINUS",
  "MULT",
  "DIVIDE",
  "POWER",
  "MODULO",
  "BITAND",
  "BITOR",
  "BITXOR",
  "BITNOT",
  "BITSHL",
  "BITSHR",
};
